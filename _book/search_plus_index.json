{"./":{"url":"./","title":"GitBook教程","keywords":"","body":"简介 本书是个人的开发笔记.用于知识点学习和总结. ios的oc,swift react-native的react,javascript nodejs 注意: 虽然目标明确,可日常生活过于散漫,导致进程遥遥无期,也就是传说中的拖延症.希望此次能让病情有所缓解. @xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-01-11 23:56:17 "},"doc/gitbook/":{"url":"doc/gitbook/","title":"简介","keywords":"","body":"gitbook简介 gitBook文档 GitBook文档 GitBook开发手册 gitbook创建 gitbook-cli和gitbook是两个命令 npm install gitbook-cli -g git init创建文件: README.md(默认) SUMMARY.md(文件的目录) 文档书写 创建book.json文件,指定readme文件的位置. { \"title\": \"我的一本书\", \"author\" : \"李东波\", \"description\" : \"我第一本书的描述，很好\", \"language\" : \"zh-hans\", \"structure\": { \"readme\": \"README.md\" } } 封面 封面由 cover.jpg 文件指定，cover_small.jpg 同样可以作为小版本封面存在。封面应该是 JPEG 格式的文件。 大 小 文件 cover.jpg cover_small.jpg 大小(像素) 1800*2360 200*262 pdf/epub/mobi格式 calibre mobi格式,执行 gitbook mobi . 左侧导航栏添加链接信息 \"links\" : { \"sidebar\" : { \"Home\" : \"http://zhangjikai.com\" } } 自定义页面样式 \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 插件 配置使用插件 \"plugins\": [ \"disqus\" ] 然后使用gitbook install来安装新插件 去除自带插件 \"plugins\": [ \"-search\" ] 配置插件属性 \"pluginsConfig\": { \"fontsettings\": { \"theme\": \"sepia\", \"family\": \"serif\", \"size\": 1 } } structure 指定 Readme、Summary、Glossary 和 Languages 对应的文件名，下面是这几个文件对应变量以及默认值： |变量|含义和默认值| |-|-| |structure.readme|Readme file name (defaults to README.md)| |structure.summary |Summary file name (defaults to SUMMARY.md)| |structure.glossary |Glossary file name (defaults to GLOSSARY.md)| |structure.languages |Languages file name (defaults to LANGS.md)| @xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-01-12 10:19:33 "},"doc/javascript/":{"url":"doc/javascript/","title":"JavaScript","keywords":"","body":"JavaScript实现 JavaScript包含: The Core(ECMAScript) DOM BOM @xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-01-10 15:46:21 "},"doc/javascript/basics/":{"url":"doc/javascript/basics/","title":"基础","keywords":"","body":"@xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-01-12 10:50:08 "},"doc/javascript/basics/variable.html":{"url":"doc/javascript/basics/variable.html","title":"变量","keywords":"","body":"声明 let sum = a + b //没有分号, 不推荐 let diff = a - b; //推荐 // 有效,但容易出错,不推荐 if (test) console.log(test); //推荐 if (test) { console.log(test);} 变量 var message = 'hi'; var 声明范围 局部变量 function test() { var message = \"hi\"; // local variable } test(); console.log(message);//错误 全局变量 function test() { message = \"hi\"; // global variable } test(); console.log(message); // \"hi” var声明提升 //可以重复声明不报错 function foo() { var age = 16; var age = 26; var age = 36; console.log(age); } foo(); // 36 let声明 只在作用域内有用.不能重复声明 临时死区 全局声明 var name = 'Matt'; console.log(window.name); // 'Matt' let age = 26; console.log(window.age); // undefined 在循环中的let声明 for (let i = 0; i const声明 const声明后,值不能重新定义. const声明仅仅强制指向它的指针指向.如果一个const变量指向一个对象,改变对象的属性并不违反原则. const person = {}; person.name = 'Matt'; // ok 声明的样式和最好的练习 不要使用var 偏爱const多于let @xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-01-12 13:02:37 "},"doc/javascript/basics/data_types.html":{"url":"doc/javascript/basics/data_types.html","title":"数据类型","keywords":"","body":"数据类型 typeof操作符 typeof XXX undefined boolean string number object function symbol undefined类型 Null类型 Null类型只有一个特殊值: null. null是一个空对象指针.typeof null 返回的是是 object. let car = null; console.log(typeof car); // \"object” undefined是null的子类. 所以以下等式成立 console.log(null == undefined); // true Boolean类型 数据类型 为true 为false Boolean true false String 非空字符串 \"\"(空字符串) Number 非0数字 0,NaN Object 任意对象 null Undefined n/a undefined @xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-01-12 13:03:02 "},"doc/react-native/":{"url":"doc/react-native/","title":"ReactNative","keywords":"","body":"React Native概述 为什么选择React? React的开发者采取了虚拟DOM的做法,虚拟DOM更加轻量,对真实DOM抽象化.独立于特定浏览器的具体实现.每当触发需要改变的DOM事件时, React会创建一个新的虚拟DOM树,与已有的树进行对比,计算出最少的DOM变化集合,把它们放入队列再全部执行,重新渲染.这种做法比直接操作DOM快了很多. 开发简单, 声明式编程: 按照设计稿编写声明式视图，定义应用的状态。React会根据应用状态，仅更新、渲染对应的组件，非常高效。这让代码的编写和维护变得非常容易，同时更具可预测性，更容易调试。 组件化开发: 用了React，你只需要开发组件。开发一整套组件，再把它们拼装成应用。 工作原理: 将UI拆解成组件: 交互式UI. 为什么选择React Native? React Native允许开发者通过JavaScript函数的代理, 直接调用原生模块.使用React Native,会得到原生的用户体验以及Web的开发体验. 简单易学: 上手难度低,只要学会React,就会上手开发界面,如果会移动端的开发,更是锦上添花; 快速迭代: 不用等待应用编译,通过热重载,就能快速显示UI; 智能调试: React Native会在报错时,抛出错误描述; 原生模块: 可以自定义原生模块,提供完整能力; 一次学习,全平台开发: 可以为任何平台开发应用,但需为每个平台提供基础的技术支持. RN需要一个JS运行环境, 在iOS上直接使用内置的javascriptcore, 在Android上则使用webkit.org官方提供的jsc.so.此外还集成了其它开源组件,如fresco图片组件,okhttp网络组件等. 对于JS开发者来说,画UI只需要使用React来做, 不需要特别关心具体的平台.以iOS为例, JavaScript的形式告诉Objective-C需要执行什么,然后iOS自己去调用UIKit等框架绘制界面. 所以,React Native能运行起来,全靠Objective-C和JavaScript的交互. React Native的工作原理 原生代码和JavaScript代码通过桥接层进行交互, 这是一个异步的批量串行处理过程. 桥接层介于原生层和JavaScript代码之间,正如它的名称一样,作用是桥接.用户输入,计时器,网络请求和响应等在原生代码中.React Native在原生层收集事件产生的数据,串行处理后通过桥接层传给JavaScript层, JS层拿到数据后处理并生成一系列指令.同样经过批量串行处理后传回原生层.桥接层的原生端决定哪个模块负责处理传回的指令并调用相应的方法,在需要的情况下更新UI. @xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-02-12 11:37:13 "},"doc/iOS/":{"url":"doc/iOS/","title":"iOS","keywords":"","body":"@xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-02-16 21:11:51 "},"doc/iOS/background_task.html":{"url":"doc/iOS/background_task.html","title":"后台任务","keywords":"","body":"iOS的后台保活 iOS可以做到后台保活. 短时间保活方式有beginBackgroundTaskWithName; App长时间保活方式有: 播放无声音乐,后台持续定位,后台下载资源,BGTaskScheduler等 唤醒App的方式: 推送,VoIP等 App运行状态及状态变化 iOS13+的设备,支持多场景,共有: unattached: 多个场景的情况,如果创建的场景不是当前显示的场景,那么场景处于unattached状态; Foreground Inactive:应用启动后,显示启动图的过程中; Foreground Active:应用启动后,显示出来我们设置的rootViewController之后; Foreground Inactive:应用启动后,场景处于显示状态,数据加载完毕,且用户和App没有交互过程中; Background:用户点击Home,或者切换App,锁屏后; Suspended:进入Background后,应用的代码不执行后,应用进入Suspended状态;(代码是否在运行,可以在应用写定时器,定时输出内容,从Xcode控制台,或者Mac端控制台查看是否有输出内容来判断); 低于iOS13的设备,app的运行状态: Not Running:用户没有启动App,或者Terminate App后,App处于的状态; Foreground Inactive:(同上); Foreground Active:(同上); Foreground Inactive:(同上); Background:(同上); Suspended:(同上); iOS后台保活方式简介 短时间App后台保活 beginBackgroundTaskWithName和endBackgroundTask 系统低于iOS13的设备,后台运行时间3分钟; 系统高于iOS13的设备,后台运行时间约31秒; 播放无声音乐 App进入后台后,播放无声音乐,适用于音视频类App. 后台持续定位 对于定位类App,持续定位App,可以实现App 后台保活. 后台下载资源 对于要下载资源的App,需要后台下载资源,比如我们在某App下载资源的时候,我们希望切换App时候,或者App退出后台后,资源仍然继续下载,这样我们打开App的时候,资源已经下载好了. BackgroundTasks BackgroundTasks.framework是iOS13新增的framework. @xclidongbo all right reserved，powered by Gitbook该文件最后修改时间： 2020-02-16 21:59:03 "}}